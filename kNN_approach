# Creating a partition to use to split data set
set.seed(1234)

indexing = createDataPartition(UFC$Winner, p = 0.75, list = F)

training_set = UFC[indexing, ]
testing_set = UFC[-indexing, ]

# Creating the necessary data set that includes only differential variables 

training_dif.only = training_set %>% 
  select(Winner, finish_details, total_fight_time_secs, rank_dif, weight_class, gender, is_foreign, title_bout, empty_arena, ev_dif, win_dif, win_streak_dif, longest_win_streak_dif, draw_dif, loss_dif, lose_streak_dif, KO.TKO.Doctor_Stoppage_win_dif, sub_win_dif, dec_dif, age_dif, height_dif, reach_dif, stance_comparison, sig_str_dif, avg_str_pct, avg_td_dif, avg_td_pct, avg_sub_att_dif, total_round_dif, total_title_bout_dif) %>% 
  mutate(
    Winner = relevel(Winner, ref = "Blue"),
    finish_details = relevel(finish_details, ref = "Decision"),
    gender = relevel(gender, ref = "MALE"),
    stance_comparison = relevel(stance_comparison, ref = "Same")
  )
  
testing_dif.only = testing_set %>% 
  select(
    Winner, finish_details, total_fight_time_secs, rank_dif, weight_class, gender, is_foreign, title_bout, empty_arena, ev_dif, win_dif, win_streak_dif, longest_win_streak_dif, draw_dif, loss_dif, lose_streak_dif, KO.TKO.Doctor_Stoppage_win_dif, sub_win_dif, dec_dif, age_dif, height_dif, reach_dif, stance_comparison, sig_str_dif, avg_str_pct, avg_td_dif, avg_td_pct, avg_sub_att_dif, total_round_dif, total_title_bout_dif
  ) %>% 
  mutate(
    Winner = relevel(Winner, ref = "Blue"),
    finish_details = relevel(finish_details, ref = "Decision"),
    gender = relevel(gender, ref = "MALE"),
    stance_comparison = relevel(stance_comparison, ref = "Same")
  )
  
# Next create a normalize function to allow for numeric variable scaling 

normalize = function(x) {
  return((x - min(x))/(max(x) - min(x)))
}

# Pre-process the data set 

training_for_knn.pt_1 = training_dif.only %>%
  mutate(
    total_fight_time_secs = normalize(total_fight_time_secs), 
    rank_dif = normalize(rank_dif), 
    ev_dif = normalize(ev_dif), 
    win_dif = normalize(win_dif), 
    win_streak_dif = normalize(win_streak_dif), 
    longest_win_streak_dif = normalize(longest_win_streak_dif), 
    draw_dif = normalize(draw_dif), 
    loss_dif = normalize(loss_dif), 
    lose_streak_dif = normalize(lose_streak_dif),
    KO.TKO.Doctor_Stoppage_win_dif = normalize(KO.TKO.Doctor_Stoppage_win_dif),
    sub_win_dif = normalize(sub_win_dif), 
    dec_dif = normalize(dec_dif), 
    age_dif = normalize(age_dif), 
    height_dif = normalize(height_dif),
    reach_dif = normalize(reach_dif), 
    sig_str_dif = normalize(sig_str_dif), 
    avg_str_pct = normalize(avg_str_pct), 
    avg_td_dif = normalize(avg_td_dif), 
    avg_td_pct = normalize(avg_td_pct),
    avg_sub_att_dif = normalize(avg_sub_att_dif), 
    total_round_dif = normalize(total_round_dif), 
    total_title_bout_dif = normalize(total_title_bout_dif)
  ) %>% 
  mutate(
    punch_elbow_slam = ifelse(finish_details == "Punch/Elbow/Slam", 1, 0),
    kick_knee = ifelse(finish_details == "Kick/Knee", 1, 0), 
    choke = ifelse(finish_details == "Choke", 1, 0), 
    decision = ifelse(finish_details == "Decision", 1, 0),
    lowerbody = ifelse(finish_details == "Lowerbody Joint Lock", 1, 0), 
    upperbody = ifelse(finish_details == "Upperbody Joint Lock", 1, 0), 
    heavyweight = ifelse(weight_class == "Heavyweight", 1, 0),
    light.heavyweight = ifelse(weight_class == "Light Heavyweight", 1, 0), 
    middleweight = ifelse(weight_class == "Middleweight", 1, 0), 
    welterweight = ifelse(weight_class == "Welterweight", 1, 0), 
    lightweight = ifelse(weight_class == "Lightweight", 1, 0), 
    featherweight = ifelse(weight_class == "Featherweight", 1, 0), 
    bantamweight = ifelse(weight_class == "Bantamweight", 1, 0), 
    flyweight = ifelse(weight_class == "Flyweight", 1, 0), 
    women_featherweight = ifelse(weight_class == "Women's Featherweight", 1, 0), 
    women_bantamweight = ifelse(weight_class == "Women's Bantamweight", 1, 0), 
    women_flyweight = ifelse(weight_class == "Women's Flyweight", 1, 0), 
    women_strawweight = ifelse(weight_class == "Women's Strawweight", 1, 0), 
    gender = ifelse(gender == "MALE", 1, 0), 
    is_foreign = ifelse(is_foreign == TRUE, 1, 0), 
    title_bout = ifelse(title_bout == TRUE, 1, 0), 
    stance_comparison = ifelse(stance_comparison == "Same", 0, 1)
  )


training_for_knn = training_for_knn.pt_1 %>% 
  dplyr::select(Winner, punch_elbow_slam, kick_knee, choke, lowerbody, upperbody, decision, total_fight_time_secs, heavyweight, light.heavyweight, middleweight, welterweight, lightweight, featherweight, bantamweight, flyweight, women_featherweight, women_bantamweight, women_flyweight, women_strawweight, gender, is_foreign, title_bout, empty_arena, ev_dif, win_dif, win_streak_dif, longest_win_streak_dif, draw_dif, loss_dif, lose_streak_dif, KO.TKO.Doctor_Stoppage_win_dif, sub_win_dif, dec_dif, age_dif, height_dif, reach_dif, stance_comparison, sig_str_dif, avg_str_pct, avg_td_dif, avg_td_pct, avg_sub_att_dif, total_round_dif, total_title_bout_dif)


testing_for_knn.pt_1 = testing_dif.only %>%
  mutate(
    total_fight_time_secs = normalize(total_fight_time_secs), 
    rank_dif = normalize(rank_dif), 
    ev_dif = normalize(ev_dif), 
    win_dif = normalize(win_dif), 
    win_streak_dif = normalize(win_streak_dif), 
    longest_win_streak_dif = normalize(longest_win_streak_dif), 
    draw_dif = normalize(draw_dif), 
    loss_dif = normalize(loss_dif), 
    lose_streak_dif = normalize(lose_streak_dif),
    KO.TKO.Doctor_Stoppage_win_dif = normalize(KO.TKO.Doctor_Stoppage_win_dif),
    sub_win_dif = normalize(sub_win_dif), 
    dec_dif = normalize(dec_dif), 
    age_dif = normalize(age_dif), 
    height_dif = normalize(height_dif),
    reach_dif = normalize(reach_dif), 
    sig_str_dif = normalize(sig_str_dif), 
    avg_str_pct = normalize(avg_str_pct), 
    avg_td_dif = normalize(avg_td_dif), 
    avg_td_pct = normalize(avg_td_pct),
    avg_sub_att_dif = normalize(avg_sub_att_dif), 
    total_round_dif = normalize(total_round_dif), 
    total_title_bout_dif = normalize(total_title_bout_dif)
  ) %>% 
  mutate(
    punch_elbow_slam = ifelse(finish_details == "Punch/Elbow/Slam", 1, 0),
    kick_knee = ifelse(finish_details == "Kick/Knee", 1, 0), 
    choke = ifelse(finish_details == "Choke", 1, 0), 
    decision = ifelse(finish_details == "Decision", 1, 0),
    lowerbody = ifelse(finish_details == "Lowerbody Joint Lock", 1, 0), 
    upperbody = ifelse(finish_details == "Upperbody Joint Lock", 1, 0), 
    heavyweight = ifelse(weight_class == "Heavyweight", 1, 0),
    light.heavyweight = ifelse(weight_class == "Light Heavyweight", 1, 0), 
    middleweight = ifelse(weight_class == "Middleweight", 1, 0), 
    welterweight = ifelse(weight_class == "Welterweight", 1, 0), 
    lightweight = ifelse(weight_class == "Lightweight", 1, 0), 
    featherweight = ifelse(weight_class == "Featherweight", 1, 0), 
    bantamweight = ifelse(weight_class == "Bantamweight", 1, 0), 
    flyweight = ifelse(weight_class == "Flyweight", 1, 0), 
    women_featherweight = ifelse(weight_class == "Women's Featherweight", 1, 0), 
    women_bantamweight = ifelse(weight_class == "Women's Bantamweight", 1, 0), 
    women_flyweight = ifelse(weight_class == "Women's Flyweight", 1, 0), 
    women_strawweight = ifelse(weight_class == "Women's Strawweight", 1, 0), 
    gender = ifelse(gender == "MALE", 1, 0), 
    is_foreign = ifelse(is_foreign == TRUE, 1, 0), 
    title_bout = ifelse(title_bout == TRUE, 1, 0), 
    stance_comparison = ifelse(stance_comparison == "Same", 0, 1)
  )

testing_for_knn = testing_for_knn.pt_1 %>% 
  dplyr::select(Winner, punch_elbow_slam, kick_knee, choke, lowerbody, upperbody, decision, total_fight_time_secs, heavyweight, light.heavyweight, middleweight, welterweight, lightweight, featherweight, bantamweight, flyweight, women_featherweight, women_bantamweight, women_flyweight, women_strawweight, gender, is_foreign, title_bout, empty_arena, ev_dif, win_dif, win_streak_dif, longest_win_streak_dif, draw_dif, loss_dif, lose_streak_dif, KO.TKO.Doctor_Stoppage_win_dif, sub_win_dif, dec_dif, age_dif, height_dif, reach_dif, stance_comparison, sig_str_dif, avg_str_pct, avg_td_dif, avg_td_pct, avg_sub_att_dif, total_round_dif, total_title_bout_dif)

# Create a basic k-NN model for a reference 

set.seed(1234)

proposed_optimal_k = round(sqrt(nrow(training_for_knn)), 1) # Typically projected as the square root of the total number of variables 

training_knn_cl = training_for_knn[, 1] # Creating a classification for the model to use in training model 

KNN_a = knn(train = training_for_knn[, -1], 
            test = testing_for_knn[, -1], 
            cl = training_knn_cl, 
            k = proposed_optimal_k)

KNN_b = knn(train = training_for_knn[, -1], 
            test = testing_for_knn[, -1], 
            cl = training_knn_cl, 
            k = (proposed_optimal_k + 1))
            
accuracy_KNN_a = sum(KNN_a == testing_knn_cl) / NROW(testing_knn_cl)
accuracy_KNN_b = sum(KNN_b == testing_knn_cl) / NROW(testing_knn_cl)

# These are likely not the best possible models, but works as a good starting point

# Use a for loop to pass a number of different possible K-values to be used in determining the optimal model performance 

knn.opt = 1
for (i in 1:499) {
  
  knn.mod = knn(train = training_for_knn[, -1], 
            test = testing_for_knn[, -1], 
            cl = training_knn_cl, 
            k = i)
  
  knn.opt[i] = 100 * sum(knn.mod == testing_knn_cl) / NROW(testing_knn_cl)
  
  k = i
  
  cat(k, "=", knn.opt[i], "")
}

plot(knn.opt, type = "b", xlab ="K-value", ylab = "Accuracy")  # Show the performance of the projected model and visualize the best parameter 

accuracy_KNN_opt = round(max(knn.opt), 3)

accuracy_KNN_opt = round(max(knn.opt), 3)
accuracy_KNN_opt
